<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>About My Homepage</title>
    <link rel="stylesheet" href="/style.css" />
  </head>
  <body>
    <header>
      <h1>About My Homepage</h1>
      <nav>
        <ul>
          <li><a href="/">Home</a></li>
          <li><a href="/about">About</a></li>
          <li><a href="/contact">Contact</a></li>
        </ul>
      </nav>
    </header>
    <main>
      <section>
        <h2>About My Homepage</h2>
        <p>랜덤 문제: <span id="question"></span></p>
        <label for="answer-input">정답을 입력하세요:</label>
        <input type="text" id="answer-input" name="answer" />
        <button type="button" id="submit-button">제출</button>
        <button type="button" id="next-button">다음 문제</button>
        <p id="result"></p>
      </section>
    </main>
    <script>
      const questions = [
      {
        question: "스마트폰이란=[]",
        answer: "컴퓨터+mp3플레이어+휴대용 게임기"
      },
      {
        question: "스마트폰은[]가 가능",
        answer: "다양한앱설치"
      },
      {
        question: "애플리케이션 실행단계:[]",
        answer: "자바소스파일,컴파일러,.dex파일,.apk파일,다운로드"
      },
      {
        question: "[] 컴포넌트로 이루어진다.",
        answer: "애플리케이션"
      },
      {
        question: "컴포넌트 4가지를 서술하시오:[]",
        answer: "액티비티와서비스와방송수신자와컨텐트제공자"
      },
      {
        question: "액티비티의 관하여 2가지 서술하시오:[]",
        answer: "사용자 인터페이스 화면을 가지는 하나의직업, 액티비티들이 모이면 애플리케이션이된다."
      },
      {
        question: "서비스:[]",
        answer: "백그라운드에서 실행되는 컴포넌트"
      },
      {
        question: "서비스:백그라운드에서 실행되는 컴포넌트/[]",
        answer: "오랫동안 실행되는 작업이나 원격 프로세스를 위한 작업"
      },
      {
        question: "서비스 예시:액티비티는[]있다",
        answer: "음악재생화면"
      },
      {
        question: "서비스 예시:서비스에는[]있다",
        answer: "음악재생서비스와방송수신자가"
      },
      {
        question: "pc의애플리케이션의 각각의 프로그램은[]으로 실행된다",
        answer: "독립적"
      },
      {
        question: "인텐트는[]의 의도를 적어서 []에 전달하면[]가 가장 적절한[]를 찾아서 활성화 하고 실행한다.",
        answer: "애플리케이션와안드로이드와안드로이드와컴포넌트"
      },
      {
        question: "매니페스트파일은[]가 어떤[]를 시작하려면 우선 [] 안에 사용하려는 [] 가 존재하는지 알아야한다.",
        answer: "안드로이드와컴포넌트와애플리케이션와컴포넌트"
      },
      {
        question: "매니페스트파일은 []의 모든 []들은 매니페스트 파일안에 선언되어 있어야함.",
        answer: "애플리케이션와 컴포넌트"
      },
      {
        question: "<activity>앨리먼트:(),<service>앨리먼트:(),<receiver>앨리먼트:(),<provider>앨리먼트:()",
        answer: "액티비티 선언와 서비스 선언와 방송 수신자와 컨텐트 제공자"
      },
      {
        question: "public class mainActivity extends actionbaractivity{...}:()의 정의/()로부터()받았으므로()가된다/()는()에서()을구성()가지의()중 하나",
        answer: "클래스와activity와상속와액티비티와액티비티와안드로이드와애플리케이션와4와컴포넌트"
      },
      {
        question: "@override:()의하나/()은()에게 추가적인 정보를 줌/()은 메소드가()클래스의 ()를 재정의()하였다는것을 나타남",
        answer: "어노테이션와어노테이션컴파일러@override와부모와매소드와오버라이드"
      },
      {
        question: "public void onCreate(){...}은:(())메소드는 ()가 생성되는 순간 딱() 호출/모든()와 ( )설정이 여기에 들어간다/()언어의(())역할",
        answer: "oncreate와액티비티와한번와초기화와사용자인터페이스와c와main"
      },
      {
        question: "super.onCreate(savedInstanceState)은()클래스의()를 호출하는 문장/자신을 가리키는 키워드가 ()라면,부모를 가리키는 키워드는 ()이다/()는 부모의 생성자를 의미/부모의()를 임의로 호출하지 않으면,()의 기본생성자가 ()으로 호출",
        answer: "부모와actionbaractivity와oncreate와this와super와super와생성자와부모클래스와자동"
      },
      {
        question: "setContentView(r.layout.activity_main)은()라는 함수는 ()의 화면을 설정하는 함수/()acitivity_main.xml파일을 나타냄/도트연산자는()클래스 맴버를 참조할떄 사용하는 연산자",
        answer: "setContentview와액티비티와r.layout.activity_main와."
      },
      {
        question: "안드로이드 애플리케이션의 실행이 시작되는곳:()에는 (())이없다./()별로실행/()중에서는 ()()가 가장먼저실행",
        answer: "안드로이드와main와액티비티와액티비티와main와매소드"
      },
    ];
        let currentQuestionIndex = Math.floor(Math.random() * questions.length);
        let currentQuestion = questions[currentQuestionIndex];
        let correctAnswers = getCorrectAnswers(currentQuestion);
        const questionElement = document.querySelector("#question");
        questionElement.textContent = currentQuestion.question;
        const submitButton = document.querySelector("#submit-button");
        const nextButton = document.querySelector("#next-button");
        const result = document.querySelector("#result");

        submitButton.addEventListener("click", () => {
        const answerInput = document.querySelector("#answer-input");
        const answer = answerInput.value;
        if (correctAnswers.includes(answer)) {
            result.textContent = "정답입니다! 정답은 " + correctAnswers.join(", ") + "입니다.";
        } else {
            result.textContent = "틀렸습니다. 정답은 " + correctAnswers.join(", ") + "입니다. 다시 시도해보세요.";
        }
        answerInput.value = ""; // 입력 폼 초기화
        });

        nextButton.addEventListener("click", () => {
        currentQuestionIndex = Math.floor(Math.random() * questions.length);
        currentQuestion = questions[currentQuestionIndex];
        correctAnswers = getCorrectAnswers(currentQuestion);
        questionElement.textContent = currentQuestion.question;
        result.textContent = "";
        });

      function getCorrectAnswers(question) {
  return question.answer.split(',');
}
    </script>
  </body>
</html>